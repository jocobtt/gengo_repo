physics <- gutenberg_download(c(37729, 14725, 13476, 30155),
meta_fields = "author")
physics_words <- physics %>%
unnest_tokens(word, text) %>%
count(author, word, sort = TRUE)
library(tidytext)
physics_words <- physics %>%
unnest_tokens(word, text) %>%
count(author, word, sort = TRUE)
physics_words
library(swat)
library(tidyverse)
library(getPass)
# load our credentials for swat
Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/opt/sas/viya/config/etc/SASSecurityCertificateFramework/cacerts/trustedcerts.pem') # change this location to location that everyone can use
#Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/path/trustedcerts.pem') just need a different location - for my viya 4 one
Sys.setenv(TKESSL_OPENSSL_LIB = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
Sys.setenv(LD_LIBRARY_PATH = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
conn <- CAS(hostname = '19w47mpp-2.gtp-americas.sashq-d.openstack.sas.com', port = 8777, protocol = 'https',
username = 'jabras', password = getPass::getPass())
# load our credentials for swat
# '/opt/sas/viya/config/etc/SASSecurityCertificateFramework/cacerts/trustedcerts.pem'
Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/Users/jabras/model_ops/mmgr/demo/certs/19w47mpp-vault-services-ca.crt') # change this location to location that everyone can use
#Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/path/trustedcerts.pem') just need a different location - for my viya 4 one
Sys.setenv(TKESSL_OPENSSL_LIB = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
Sys.setenv(LD_LIBRARY_PATH = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
conn <- CAS(hostname = '19w47mpp-2.gtp-americas.sashq-d.openstack.sas.com', port = 8777, protocol = 'https',
username = 'jabras', password = getPass::getPass())
# load the data locally and convert it into a table
table <- defCasTable(conn, tablename = "HMEQ.sashdat", caslib = "Public") %>% to.casDataFrame()
# feature engineer
loadActionSet(conn, "dataSciencePilot")
loadActionSet(conn, "cardinality")
cas.dataSciencePilot.analyzeMissingPatterns(
conn,
)
cas.dataSciencePilot.analyzeMissingPatterns(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public')
)
cas.dataSciencePilot.analyzeMissingPatterns(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
casOut = list(name = 'HMEQ_exp', replace = TRUE, caslib = 'Public')
)
# screenvariables
cas.dataSciencePilot.screenVariables(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public')
)
# screenvariables
cas.dataSciencePilot.screenVariables(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
target = 'BAD'
)
# screenvariables
cas.dataSciencePilot.screenVariables(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
target = 'BAD',
casOut = list(name = 'HMEQ_exp', replace = TRUE, caslib = 'Public')
)
# explore data
cas.dataSciencePilot.exploreData(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public')
)
# explore data
cas.dataSciencePilot.exploreData(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
casOut = list(name = 'HMEQ_exp', replace = TRUE, caslib = 'Public')
)
# explore data
expp <- cas.dataSciencePilot.exploreData(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
casOut = list(name = 'HMEQ_exp', replace = TRUE, caslib = 'Public')
)
expp
library(swat)
library(tidyverse)
library(getPass)
library(gutenbergr)
library(tidytext)
# load our credentials for swat
# '/opt/sas/viya/config/etc/SASSecurityCertificateFramework/cacerts/trustedcerts.pem'
Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/Users/jabras/model_ops/mmgr/demo/certs/19w47mpp-vault-services-ca.crt') # change this location to location that everyone can use
#Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/path/trustedcerts.pem') just need a different location - for my viya 4 one
Sys.setenv(TKESSL_OPENSSL_LIB = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
Sys.setenv(LD_LIBRARY_PATH = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
conn <- CAS(hostname = '19w47mpp-2.gtp-americas.sashq-d.openstack.sas.com', port = 8777, protocol = 'https',
username = 'jabras', password = getPass::getPass())
# load the data locally and convert it into a table
table <- defCasTable(conn, tablename = "HMEQ.sashdat", caslib = "Public") %>% to.casDataFrame()
tbl <- defCasTable(conn, tablename = "HMEQ.sashdat", caslib = "Public")
##############
#  EDA in R  #
##############
table %>% str
# get summary of the dataset
summ <- cas.simple.summary(tbl, groupby = c("BAD"))
# get summary of the dataset
summ <- cas.simple.summary(tbl, orderBy = c("BAD"))
summ
print(summ)
summ %>% summary()
summ %>% print.data.frame()
summ %>% print()
summ %>% print() %>% as_tibble()
summ %>% print() %>% as_tibble(n = 15, width = 10)
summ %>% print() %>% as_tibble(n = 15)
summ %>% print() %>% as_tibble(width = 12)
##############
#  EDA in R  #
##############
table %>% str
##############
#  EDA in R  #
##############
table %>% str %>% as_tibble()
summ %>% print() %>% as_tibble()
table %>% ggplot(., aes(x = "DEBTINC", y = "LOAN")) %>% geom_point() %>% geom_line() %>% ggtitle("Debtinc vs Loan")
table %>% ggplot(., aes(x = "DEBTINC", y = "LOAN")) + geom_point() + geom_line() + ggtitle("Debtinc vs Loan")
table %>% head() %>% as_tibble()
# feature engineer
loadActionSet(conn, "dataSciencePilot")
loadActionSet(conn, "cardinality")
# get coefficient of variation for each column in the table
cas.cv(conn, table)
# get coefficient of variation for each column in the table
cas.cv(
conn,
)
####################################
# use automl & feature engineering #
####################################
auto_ml <- cas.dataSciencePilot.dsAutoMl(
conn,
)
####################################
# use automl & feature engineering #
####################################
auto_ml <- cas.dataSciencePilot.dsAutoMl(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public")
)
####################################
# use automl & feature engineering #
####################################
auto_ml <- cas.dataSciencePilot.dsAutoMl(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
target = "BAD"
)
####################################
# use automl & feature engineering #
####################################
auto_ml <- cas.dataSciencePilot.dsAutoMl(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
target = "BAD",
transformationOut = TRUE
)
####################################
# use automl & feature engineering #
####################################
auto_ml <- cas.dataSciencePilot.dsAutoMl(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
target = "BAD",
transformationOut = list(name = "hmeq_auto")
)
####################################
# use automl & feature engineering #
####################################
auto_ml <- cas.dataSciencePilot.dsAutoMl(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
target = "BAD",
transformationOut = list(name = "hmeq_auto"),
featureOut = list(name = "auto_features")
)
####################################
# use automl & feature engineering #
####################################
auto_ml <- cas.dataSciencePilot.dsAutoMl(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
target = "BAD",
transformationOut = list(name = "hmeq_auto"),
featureOut = list(name = "auto_features"),
pipelineOut = TRUE
)
####################################
# use automl & feature engineering #
####################################
auto_ml <- cas.dataSciencePilot.dsAutoMl(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
target = "BAD",
transformationOut = list(name = "hmeq_auto"),
featureOut = list(name = "auto_features"),
pipelineOut = list(name = "pipe_features")
)
auto_ml
####################################
# use automl & feature engineering #
####################################
feat_eng <- cas.dataSciencePilot.featureMachine(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
)
####################################
# use automl & feature engineering #
####################################
feat_eng <- cas.dataSciencePilot.featureMachine(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
target = "BAD",
)
####################################
# use automl & feature engineering #
####################################
feat_eng <- cas.dataSciencePilot.featureMachine(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
target = "BAD",
transformationOut = list(name = "hmeq_eng"),
)
####################################
# use automl & feature engineering #
####################################
feat_eng <- cas.dataSciencePilot.featureMachine(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public"),
target = "BAD",
transformationOut = list(name = "hmeq_eng"),
featureOut = list(name = "hmeq_feature_eng")
)
feat_eng
# get coefficient of variation for each column in the table
cas.cv(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public')
)
# get coefficient of variation for each column in the table
cas.cv(
conn,
)
cas.dataSciencePilot.detectInteractions(
conn,
table = list(name, 'HMEQ.sashdat', caslib = 'Public')
)
cas.dataSciencePilot.detectInteractions(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public')
)
cas.dataSciencePilot.detectInteractions(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
target = 'BAD'
)
cas.dataSciencePilot.detectInteractions(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
target = 'BAD',
casOut = list(name = 'HMEQ_interaction', replace = TRUE)
)
cas.dataSciencePilot.exploreCorrelation(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
target = 'BAD',
casOut = list(name = 'HMEQ_interaction', replace = TRUE)
)
library(swat)
library(tidyverse)
library(getPass)
library(corrplot)
# load our credentials for swat
# '/opt/sas/viya/config/etc/SASSecurityCertificateFramework/cacerts/trustedcerts.pem'
Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/Users/jabras/model_ops/mmgr/demo/certs/19w47mpp-vault-services-ca.crt') # change this location to location that everyone can use
#Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/path/trustedcerts.pem') just need a different location - for my viya 4 one
Sys.setenv(TKESSL_OPENSSL_LIB = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
Sys.setenv(LD_LIBRARY_PATH = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
conn <- CAS(hostname = '19w47mpp-2.gtp-americas.sashq-d.openstack.sas.com', port = 8777, protocol = 'https',
username = 'jabras', password = getPass::getPass())
# load the data locally and convert it into a table
table <- defCasTable(conn, tablename = "HMEQ.sashdat", caslib = "Public") %>% to.casDataFrame()
tbl <- defCasTable(conn, tablename = "HMEQ.sashdat", caslib = "Public")
# explore data
cas.dataSciencePilot.exploreData(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
casOut = list(name = 'HMEQ_exp', replace = TRUE, caslib = 'Public')
)
# feature engineer
loadActionSet(conn, "dataSciencePilot")
# explore data
cas.dataSciencePilot.exploreData(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
casOut = list(name = 'HMEQ_exp', replace = TRUE, caslib = 'Public')
)
# explore data
cas.dataSciencePilot.exploreData(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
casOut = list(name = 'HMEQ_exp', replace = TRUE, caslib = 'Public'),
)
cas.dataSciencePilot.exploreCorrelation(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
target = 'BAD',
casOut = list(name = 'HMEQ_corr', replace = TRUE)
)
# get number of missing values - only works on numeric columns
cas.nmiss(conn, table)
# get number of missing values - only works on numeric columns
cas.nmiss(
conn,
)
cas.dataSciencePilot.analyzeMissingPatterns(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
casOut = list(name = 'HMEQ_exp', replace = TRUE, caslib = 'Public')
)
corr <- defCasTable(conn, tablename = "HMEQ_corr") %>% to.casDataFrame()
corr
# cas mean
cas.mean(
conn,
table
)
# cas mean
cas.mean(
conn,
)
# get median
cas.median(
conn,
table,
q
)
# get median
cas.median(
conn,
table,
)
# find missing values etc.
cas.cardinality.summarize(
conn,
cardinality = list(name = 'hm_sum', replace = TRUE)
)
corr
# find missing values etc.
cas.cardinality.summarize(
conn,
cardinality = list(name = 'hm_sum', replace = TRUE)
)
loadActionSet(conn, "cardinality")
# find missing values etc.
cas.cardinality.summarize(
conn,
cardinality = list(name = 'hm_sum', replace = TRUE)
)
# find missing values etc.
cas.cardinality.summarize(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
cardinality = list(name = 'hm_sum', replace = TRUE)
)
# get correlation of variables
corr <- cas.simple.correlation(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public")
)
corr
corr %>% as_tibble()
corr
corr$Correlation
corr$CorrSimple
corr <- defCasTable(conn, tablename = "HMEQ_corr") %>% to.casDataFrame()
corr
ggplot(data = corr, aes(x=FirstVariable, y = SecondVariable, fill = MI)) + geom_tile()
# get correlation of variables
corr <- cas.simple.correlation(
conn,
table = list(name = "HMEQ.sashdat", caslib = "Public")
)
corr$Correlation
corr$CorrSimple
library(reshape2)
# plot correlation?
melted_cor <- reshape2::melt(corr)
head(melted_cor)
# plot correlation?
# slice data
corr_slice <- df %>% corr slice(1:12, :)
# plot correlation?
# slice data
corr_slice <- df %>% corr slice(1:12)
# plot correlation?
# slice data
corr_slice <- corr$Correlation %>% slice(1:12)
corr_slice
# plot correlation?
# slice data
corr_slice <- corr$Correlation %>% slice(,1:12)
# plot correlation?
# slice data
corr_slice <- corr$Correlation %>% slice(:,1:12)
# plot correlation?
# slice data
corr_slice <- corr$Correlation %>% slice(.,1:12)
corr_slice
# plot correlation?
# slice data
corr_slice <- corr$Correlation[,1:12]
corr_slice
melted_cor <- reshape2::melt(corr_slice)
melted_cor
melted_cor %>% ggplot(. , aes(x=Variable, y = variable, fill = value)) + geom_tile()
library(swat)
library(tidyverse)
library(getPass)
library(corrplot)
library(reshape2)
# load our credentials for swat
# '/opt/sas/viya/config/etc/SASSecurityCertificateFramework/cacerts/trustedcerts.pem'
Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/Users/jabras/model_ops/mmgr/demo/certs/19w47mpp-vault-services-ca.crt') # change this location to location that everyone can use
#Sys.setenv(CAS_CLIENT_SSL_CA_LIST = '/path/trustedcerts.pem') just need a different location - for my viya 4 one
Sys.setenv(TKESSL_OPENSSL_LIB = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
Sys.setenv(LD_LIBRARY_PATH = '/lib/x86_64-linux-gnu/libssl.so.1.0.0')
conn <- CAS(hostname = '19w47mpp-2.gtp-americas.sashq-d.openstack.sas.com', port = 8777, protocol = 'https',
username = 'jabras', password = getPass::getPass())
# load the data locally and convert it into a table
table <- defCasTable(conn, tablename = "HMEQ.sashdat", caslib = "Public") %>% to.casDataFrame()
tbl <- defCasTable(conn, tablename = "HMEQ.sashdat", caslib = "Public")
# summarize cardinality
loadActionSet(conn, "cardinality")
# summarize cardinality
loadActionSet(conn, "cardinality")
cas.cardinality.summarize(conn, table=table)
cas.cardinality.summarize(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'))
cas.cardinality.summarize(
conn,
table = list(name = 'HMEQ.sashdat', caslib = 'Public'),
cardinality = list(name = 'card_test', replace = TRUE))
install.packages('remotes')
remotes::install_github("blairj09/dockerterm")
install.packages('plumber')
install.packages('tidyverse')
load(iris)
# build decision tree model and save it as rds value
iris_mod <- tree::tree(Species ~ . ,data = iris)
install.packages('ruigi')
library('ruigi')
library('testthat')
libarary("ruigi")
if (!require("devtools")) { install.packages("devtools") }
devtools::install_github("avantcredit/AWS.tools")
devtools::install_github("kirillseva/cacher")
library(luigi)
install.packages('luigi')
install.packages('ruigi')
devtools::install_github("richfitz/remake")
library(remake)
library(drake)
source('~/model_ops/mmgr/retrain_r/main_model.R', echo=TRUE)
install.packages("drake")
install.packages("drake")
# build decision tree model and save it as rds value
iris_mod <- tree::tree(Species ~ . ,data = iris)
# save the model
saveRDS(iris_mod, here::here("R", "model-api", "iris-model.rds"))
## ---- cars-model
# Model ---- (insert fancy model here)
cars_model <- lm(mpg ~ cyl + hp,
data = mtcars)
# Save model ----
saveRDS(cars_model, here::here("R", "model-api", "cars-model.rds"))
# Save model ----
saveRDS(cars_model,  "cars-model.rds")
# Save model ----
saveRDS(cars_model, here::here("R", "model-api", "cars-model.rds"))
!pwd
getwd()
# Build simple model from mtcars dataset
setwd(.)
# Build simple model from mtcars dataset
setwd(".")
getwd()
# Build simple model from mtcars dataset
setwd("~/model_ops/mmgr/retrain_r/plumber/")
getwd()
# Save model ----
saveRDS(cars_model, here::here("R", "model-api", "cars-model.rds"))
# Save model ----
saveRDS(cars_model, "R", "model-api", "cars-model.rds")
# Save model ----
saveRDS(cars_model,"cars-model.rds")
# save the model
saveRDS(iris_mod, "iris-model.rds")
getwd
getwd()
library(drake)
getwd()
setwd("/Users/jabras/model_ops/mmgr/retrain_r/drake/")
